# sensor_processing.py
# detect red objects and return bounding boxes for autonomous navigation

import cv2
import numpy as np

def process_frame(frame):
    """
    Detects red objects in the frame
    Returns bounding boxes [(x,y,w,h), ...]
    """
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    # Red color mask
    lower_red1 = np.array([0,120,70])
    upper_red1 = np.array([10,255,255])
    lower_red2 = np.array([170,120,70])
    upper_red2 = np.array([180,255,255])
    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    mask = mask1 + mask2
    
    # Find contours
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    boxes = []
    for cnt in contours:
        x,y,w,h = cv2.boundingRect(cnt)
        boxes.append((x,y,w,h))
    return boxes

# Example usage
if __name__ == "__main__":
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        boxes = process_frame(frame)
        for x,y,w,h in boxes:
            cv2.rectangle(frame, (x,y), (x+w, y+h), (0,255,0), 2)
        cv2.imshow("Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()
